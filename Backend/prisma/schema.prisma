generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EmployeeRole {
  admin
  teacher
  headOfDepartment
}

enum Designation {
  professor
  assistantProfessor
}

enum Gender {
  male
  female
  other
}

enum Category {
  general
  sc
  st
  obc
  others
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  abbrev    String     @unique
  subjects  Subject[]
  employees Employee[]
  students  Student[]
}

model Subject {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  subjectCode      String            @unique // Added unique constraint
  department       Department        @relation(fields: [departmentId], references: [id])
  departmentId     Int
  students         Student[]         @relation("StudentSubjects")
  assignedTeachers AssignedTeacher[]
}

model Employee {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  username         String            @unique
  email            String            @unique
  phoneNumber      String            @unique
  password         String
  gender           Gender
  role             EmployeeRole
  avtar            String?
  designation      Designation
  qualification    String
  dateOfBirth      DateTime
  dateOfJoining    DateTime
  aadharNumber     String
  permanentAddress String
  temporaryAddress String?
  isVerified       Boolean           @default(false)
  department       Department?       @relation(fields: [departmentId], references: [id])
  departmentId     Int?
  assignedTeachers AssignedTeacher[] // Changed from subjects_taught
}

model Student {
  id                  Int          @id @default(autoincrement())
  firstName           String
  lastName            String
  fatherName          String
  motherName          String
  rollNumber          String       @unique
  email               String       @unique
  phoneNumber         String       @unique
  guardianPhoneNumber String       @unique
  avtar               String?
  password            String
  aadharNumber        String
  gender              Gender
  dateOfBirth         DateTime
  dateOfJoining       DateTime
  presentSemester     Int
  isHostler           Boolean
  permanentAddress    String
  temporaryAddress    String?
  category            Category
  department          Department?  @relation(fields: [departmentId], references: [id])
  departmentId        Int?
  presentSubjects     Subject[]    @relation("StudentSubjects")
  attendances         Attendance[]
}

model AssignedTeacher {
  id          Int          @id @default(autoincrement())
  teacher     Employee     @relation(fields: [teacherId], references: [id])
  teacherId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   Int
  semester    Int // Added semester
  startTime   String // Format: "HH:MM" (e.g., "09:00")
  endTime     String // Format: "HH:MM" (e.g., "09:15")
  attendances Attendance[]
}

model Attendance {
  id                Int             @id @default(autoincrement())
  date              DateTime // Date of attendance
  status            Boolean // true = present
  assignedTeacher   AssignedTeacher @relation(fields: [assignedTeacherId], references: [id])
  assignedTeacherId Int
  student           Student         @relation(fields: [studentId], references: [id])
  studentId         Int
}
